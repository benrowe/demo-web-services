// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Status status
// swagger:model status
type Status struct {

	// ok
	// Enum: [ok fail]
	Ok string `json:"ok,omitempty"`

	// services
	Services []*StatusServicesItems0 `json:"services"`
}

// Validate validates this status
func (m *Status) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var statusTypeOkPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","fail"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusTypeOkPropEnum = append(statusTypeOkPropEnum, v)
	}
}

const (

	// StatusOkOk captures enum value "ok"
	StatusOkOk string = "ok"

	// StatusOkFail captures enum value "fail"
	StatusOkFail string = "fail"
)

// prop value enum
func (m *Status) validateOkEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, statusTypeOkPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Status) validateOk(formats strfmt.Registry) error {

	if swag.IsZero(m.Ok) { // not required
		return nil
	}

	// value enum
	if err := m.validateOkEnum("ok", "body", m.Ok); err != nil {
		return err
	}

	return nil
}

func (m *Status) validateServices(formats strfmt.Registry) error {

	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {
		if swag.IsZero(m.Services[i]) { // not required
			continue
		}

		if m.Services[i] != nil {
			if err := m.Services[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("services" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Status) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Status) UnmarshalBinary(b []byte) error {
	var res Status
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StatusServicesItems0 status services items0
// swagger:model StatusServicesItems0
type StatusServicesItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// ok
	// Enum: [ok fail]
	Ok string `json:"ok,omitempty"`
}

// Validate validates this status services items0
func (m *StatusServicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var statusServicesItems0TypeOkPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","fail"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusServicesItems0TypeOkPropEnum = append(statusServicesItems0TypeOkPropEnum, v)
	}
}

const (

	// StatusServicesItems0OkOk captures enum value "ok"
	StatusServicesItems0OkOk string = "ok"

	// StatusServicesItems0OkFail captures enum value "fail"
	StatusServicesItems0OkFail string = "fail"
)

// prop value enum
func (m *StatusServicesItems0) validateOkEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, statusServicesItems0TypeOkPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StatusServicesItems0) validateOk(formats strfmt.Registry) error {

	if swag.IsZero(m.Ok) { // not required
		return nil
	}

	// value enum
	if err := m.validateOkEnum("ok", "body", m.Ok); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatusServicesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusServicesItems0) UnmarshalBinary(b []byte) error {
	var res StatusServicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
