// Code generated by go-swagger; DO NOT EDIT.

package employee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetEmployeeHandlerFunc turns a function with the right signature into a get employee handler
type GetEmployeeHandlerFunc func(GetEmployeeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEmployeeHandlerFunc) Handle(params GetEmployeeParams) middleware.Responder {
	return fn(params)
}

// GetEmployeeHandler interface for that can handle valid get employee params
type GetEmployeeHandler interface {
	Handle(GetEmployeeParams) middleware.Responder
}

// NewGetEmployee creates a new http.Handler for the get employee operation
func NewGetEmployee(ctx *middleware.Context, handler GetEmployeeHandler) *GetEmployee {
	return &GetEmployee{Context: ctx, Handler: handler}
}

/*GetEmployee swagger:route GET /employee/{employeeId} employee getEmployee

GetEmployee get employee API

*/
type GetEmployee struct {
	Context *middleware.Context
	Handler GetEmployeeHandler
}

func (o *GetEmployee) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetEmployeeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
