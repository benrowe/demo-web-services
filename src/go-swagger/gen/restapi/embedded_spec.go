// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Go Swagger demo",
    "version": "0.1.0"
  },
  "paths": {
    "/employee": {
      "get": {
        "tags": [
          "employee"
        ],
        "operationId": "listEmployees",
        "responses": {
          "200": {
            "description": "all employees",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employee"
              }
            }
          }
        }
      }
    },
    "/employee/{employeeId}": {
      "get": {
        "tags": [
          "employee"
        ],
        "operationId": "getEmployee",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "employeeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "find employee by id",
            "schema": {
              "$ref": "#/definitions/employee"
            }
          },
          "404": {
            "description": "employee not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "status"
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "service ok",
            "schema": {
              "$ref": "#/definitions/status"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "employee": {
      "type": "object",
      "required": [
        "first_name",
        "last_name"
      ],
      "properties": {
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "last_name": {
          "type": "string"
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "re-represents the http status code of the request",
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "description": "a human readable description of the problem",
          "type": "string"
        }
      }
    },
    "status": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "string",
          "enum": [
            "ok",
            "fail"
          ]
        },
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "ok": {
                "type": "string",
                "enum": [
                  "ok",
                  "fail"
                ]
              }
            }
          }
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Go Swagger demo",
    "version": "0.1.0"
  },
  "paths": {
    "/employee": {
      "get": {
        "tags": [
          "employee"
        ],
        "operationId": "listEmployees",
        "responses": {
          "200": {
            "description": "all employees",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/employee"
              }
            }
          }
        }
      }
    },
    "/employee/{employeeId}": {
      "get": {
        "tags": [
          "employee"
        ],
        "operationId": "getEmployee",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "employeeId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "find employee by id",
            "schema": {
              "$ref": "#/definitions/employee"
            }
          },
          "404": {
            "description": "employee not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "status"
        ],
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "service ok",
            "schema": {
              "$ref": "#/definitions/status"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "employee": {
      "type": "object",
      "required": [
        "first_name",
        "last_name"
      ],
      "properties": {
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "last_name": {
          "type": "string"
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "re-represents the http status code of the request",
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "description": "a human readable description of the problem",
          "type": "string"
        }
      }
    },
    "status": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "string",
          "enum": [
            "ok",
            "fail"
          ]
        },
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "ok": {
                "type": "string",
                "enum": [
                  "ok",
                  "fail"
                ]
              }
            }
          }
        }
      }
    }
  }
}`))
}
